Check the docker version installed on your PC/image :

docker -v

=============================================================================================================
Run the "Hello World" image :

docker run hello-world

=============================================================================================================
Run the help file and see details about possible options for "docker run" :

docker run --help

=============================================================================================================
Download a small Ubuntu image locally and run it :

docker run -it ubuntu

+ type "ls" in Root terminal to see the existing files
+ type "exit" in Root terminal to exit the ubuntu image
Build an image from a Dockerfile :

docker build [OPTIONS] PATH | URL | -

+ OPTIONS :
--add-host	 	Add a custom host-to-IP mapping (host:ip)
--build-arg	 	Set build-time variables
--cache-from	 	Images to consider as cache sources
--cgroup-parent	 	Optional parent cgroup for the container
--compress	false	Compress the build context using gzip
--cpu-period	0	Limit the CPU CFS (Completely Fair Scheduler) period
--cpu-quota	0	Limit the CPU CFS (Completely Fair Scheduler) quota
--cpu-shares, -c	0	CPU shares (relative weight)
--cpuset-cpus	 	CPUs in which to allow execution (0-3, 0,1)
--cpuset-mems	 	MEMs in which to allow execution (0-3, 0,1)
--disable-content-trust	true	Skip image verification
--file, -f	 	Name of the Dockerfile (Default is ‘PATH/Dockerfile’)
--force-rm	false	Always remove intermediate containers
--iidfile	 	Write the image ID to the file
--isolation	 	Container isolation technology
--label	 	Set metadata for an image
--memory, -m	0	Memory limit
--memory-swap	0	Swap limit equal to memory plus swap: ‘-1’ to enable unlimited swap
--network	default	Set the networking mode for the RUN instructions during build
--no-cache	false	Do not use cache when building the image
--pull	false	Always attempt to pull a newer version of the image
--quiet, -q	false	Suppress the build output and print image ID on success
--rm	true	Remove intermediate containers after a successful build
--security-opt	 	Security options
--shm-size	0	Size of /dev/shm
--squash	false	Squash newly built layers into a single new layer
--tag, -t	 	Name and optionally a tag in the ‘name:tag’ format
--target	 	Set the target build stage to build.
--ulimit	 	Ulimit options

Ex :
docker build -t hello-system -f ./.Dockerfile .
Building an image tagged "hello-system" using the ".Dockerfile" file from the current location
-f <=> file
./.Dockerfile <=> the file with the .Dockerfile extension at the current location(.) 

=============================================================================================================
Inspect the state of a container :

docker inspect [CONTAINER_NAME]

=============================================================================================================
Get the ID of a container when you know the name

docker inspect --format="{{.Id}}" [CONTAINER NAME]

Example : 
docker inspect --format="{{.Id}}" mysqldb

=============================================================================================================
Copy a file from a container to the host, when you know the name of the container :

docker cp "$(docker inspect --format="{{.Id}}" [CONTAINER NAME]):[FILE PATH/FILE NAME]" [HOST PATH]

Example :
docker cp "$(docker inspect --format="{{.Id}}" mysqldb):/var/lib/mysql-files/output.csv" C:\Users\cretua\Desktop
docker cp de6cf7a1ed8f0b36a638e82d9d06a24f7ac297372a105d67ba64ab40b95c3c25:/var/lib/mysql-files/output.csv C:\Users\cretua\Desktop
=============================================================================================================

=============================================================================================================

Give a container a name (in this case "andrei_ubuntu" is the name and "ubuntu" is the image):

docker run -it --name andrei_ubuntu ubuntu

+ hold "Ctrl" + "P" + "Q" Keys to return you to where you are, but keep the container running ;

=============================================================================================================
Show available images :

docker images (show all the images)
docker images -a(show all the imagesm running or otherwise)

=============================================================================================================
See available containers :

docker ps (shows just the running ones)
docker ps -all (shows all available containers, running or otherwise)

=============================================================================================================
Attach local standard input, output, and error streams to a running container :

docker attach [OPTIONS] CONTAINER

Ex : docker attach andrei_ubuntu

(Click on a key to see the root terminal/console)

=============================================================================================================
Delete an image :
docker rmi [OPTIONS] IMAGE [IMAGE...]
+ OPTIONS :
--force, -f	false	Force removal of the image
--no-prune	false	Do not delete untagged parents

Ex :
docker rmi hello-world
docker rmi -f hello-world (force remove)

=============================================================================================================
Delete all images :

docker rmi -f $(docker images -a -q)
docker rmi -f $(docker images -q)

=============================================================================================================
Stop a container :

docker stop [CONTAINER_NAME]
docker stop musing_banach

=============================================================================================================

Stop all containers :
docker stop $(docker ps -aq)

=============================================================================================================
Remove a container :

docker rm [OPTIONS] CONTAINER [CONTAINER...]

+ OPTIONS :
--force, -f	false	Force the removal of a running container (uses SIGKILL)
--link, -l	false	Remove the specified link
--volumes, -v	false	Remove the volumes associated with the container

Ex :
docker rm -f thirsty_engelbart (Note : without naming a container, Docker assigns random names)

=============================================================================================================
Remove all containers :

docker rm $(docker ps -aq)

=============================================================================================================
